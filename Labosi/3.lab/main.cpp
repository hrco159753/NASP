#include <iostream>

#define NUM_OF_PUZZLES 4

#include "core.h"

static void LabTest();
static void FieldTest();

int main()
{
    LabTest();

    return 0;
}



void FieldTest()
{
    Field field(-1);

    std::cout << "Current value: " <<  field.GetCurrentValue() << std::endl;
    std::cout << "Has set value: " << std::boolalpha << field.HasSetValue() << std::noboolalpha << std::endl;
    std::cout << "Size: " << field.Size() << std::endl;

    for(int32_t num : field)
    {
        std::cout << num << std::endl;
    }
}

void LabTest()
{
    int init_values_vec[NUM_OF_PUZZLES][9][9] =
            {
                    {
                            {-1, -1, -1,  2, 6, -1,  7, -1, 1},
                            { 6,  8, -1, -1, 7, -1, -1,  9, -1},
                            { 1,  9, -1, -1, -1, 4, 5, -1, -1},

                            {8, 2, -1, 1, -1, -1, -1, 4, -1},
                            {-1, -1, 4, 6, -1, 2, 9, -1, -1},
                            {-1, 5, -1, -1, -1, 3, -1, 2, 8},

                            {-1, -1, 9, 3, -1, -1, -1, 7, 4},
                            {-1, 4, -1, -1, 5, -1, -1, 3, 6},
                            {7, -1, 3, -1, 1, 8, -1, -1, -1}
                    },

                    {
                            {-1,  2, -1,  6, -1,  8, -1, -1, -1},
                            { 5,  8, -1, -1, -1,  9,  7, -1, -1},
                            {-1, -1, -1, -1,  4, -1, -1, -1, -1},

                            { 3,  7, -1, -1, -1, -1,  5, -1, -1},
                            { 6, -1, -1, -1, -1, -1, -1, -1,  4},
                            {-1, -1,  8, -1, -1, -1, -1,  1,  3},

                            {-1, -1, -1, -1,  2, -1, -1, -1, -1},
                            {-1, -1,  9,  8, -1, -1, -1,  3,  6},
                            {-1, -1, -1,  3, -1,  6, -1,  9, -1}
                    },

                    {
                            {-1, -1, -1,  6, -1, -1,  4, -1, -1},
                            { 7, -1, -1, -1, -1,  3,  6, -1, -1},
                            {-1, -1, -1, -1,  9,  1, -1,  8, -1},

                            {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                            {-1,  5, -1,  1,  8, -1, -1, -1,  3},
                            {-1, -1, -1,  3, -1,  6, -1,  4,  5},

                            {-1,  4, -1,  2, -1, -1, -1,  6, -1},
                            { 9, -1,  3, -1, -1, -1, -1, -1, -1},
                            {-1,  2, -1, -1, -1, -1,  1, -1, -1}
                    },

                    {
                            {-1,  2, -1, -1, -1, -1, -1, -1, -1},
                            {-1, -1, -1,  6, -1, -1, -1, -1,  3},
                            {-1,  7,  4, -1,  8, -1, -1, -1, -1},

                            {-1, -1, -1, -1, -1,  3, -1, -1,  2},
                            {-1,  8, -1, -1,  4, -1, -1,  1, -1},
                            { 6, -1, -1,  5, -1, -1, -1, -1, -1},

                            {-1, -1, -1, -1,  1, -1,  7,  8, -1},
                            { 5, -1, -1, -1, -1,  9, -1, -1, -1},
                            {-1, -1, -1, -1, -1, -1, -1,  4, -1},
                    }
            };

    CP_sudoku sudoku;

    for(int i = 0; i < NUM_OF_PUZZLES; ++i)
    {
        auto result = sudoku.solve(init_values_vec[i]);

        std::cout << "Result: \n" << *result << "Steps: " << sudoku.getBacktraceCalls() << '\n' << std::endl;

        delete result;
    }
}